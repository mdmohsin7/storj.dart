// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names, constant_identifier_names

import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  UplinkAccessResult uplink_parse_access(
    ffi.Pointer<uplink_const_char> accessString,
  ) {
    return _uplink_parse_access(
      accessString,
    );
  }

  late final _uplink_parse_accessPtr = _lookup<
      ffi.NativeFunction<
          UplinkAccessResult Function(
              ffi.Pointer<uplink_const_char>)>>('uplink_parse_access');
  late final _uplink_parse_access = _uplink_parse_accessPtr.asFunction<
      UplinkAccessResult Function(ffi.Pointer<uplink_const_char>)>();

  UplinkAccessResult uplink_request_access_with_passphrase(
    ffi.Pointer<uplink_const_char> satellite_address,
    ffi.Pointer<uplink_const_char> api_key,
    ffi.Pointer<uplink_const_char> passphrase,
  ) {
    return _uplink_request_access_with_passphrase(
      satellite_address,
      api_key,
      passphrase,
    );
  }

  late final _uplink_request_access_with_passphrasePtr = _lookup<
          ffi.NativeFunction<
              UplinkAccessResult Function(
                  ffi.Pointer<uplink_const_char>,
                  ffi.Pointer<uplink_const_char>,
                  ffi.Pointer<uplink_const_char>)>>(
      'uplink_request_access_with_passphrase');
  late final _uplink_request_access_with_passphrase =
      _uplink_request_access_with_passphrasePtr.asFunction<
          UplinkAccessResult Function(
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>)>();

  UplinkStringResult uplink_access_satellite_address(
    ffi.Pointer<UplinkAccess> access,
  ) {
    return _uplink_access_satellite_address(
      access,
    );
  }

  late final _uplink_access_satellite_addressPtr = _lookup<
      ffi.NativeFunction<
          UplinkStringResult Function(
              ffi.Pointer<UplinkAccess>)>>('uplink_access_satellite_address');
  late final _uplink_access_satellite_address =
      _uplink_access_satellite_addressPtr
          .asFunction<UplinkStringResult Function(ffi.Pointer<UplinkAccess>)>();

  UplinkStringResult uplink_access_serialize(
    ffi.Pointer<UplinkAccess> access,
  ) {
    return _uplink_access_serialize(
      access,
    );
  }

  late final _uplink_access_serializePtr = _lookup<
      ffi.NativeFunction<
          UplinkStringResult Function(
              ffi.Pointer<UplinkAccess>)>>('uplink_access_serialize');
  late final _uplink_access_serialize = _uplink_access_serializePtr
      .asFunction<UplinkStringResult Function(ffi.Pointer<UplinkAccess>)>();

  UplinkAccessResult uplink_access_share(
    ffi.Pointer<UplinkAccess> access,
    UplinkPermission permission,
    ffi.Pointer<UplinkSharePrefix> prefixes,
    int prefixes_count,
  ) {
    return _uplink_access_share(
      access,
      permission,
      prefixes,
      prefixes_count,
    );
  }

  late final _uplink_access_sharePtr = _lookup<
      ffi.NativeFunction<
          UplinkAccessResult Function(
              ffi.Pointer<UplinkAccess>,
              UplinkPermission,
              ffi.Pointer<UplinkSharePrefix>,
              GoInt)>>('uplink_access_share');
  late final _uplink_access_share = _uplink_access_sharePtr.asFunction<
      UplinkAccessResult Function(ffi.Pointer<UplinkAccess>, UplinkPermission,
          ffi.Pointer<UplinkSharePrefix>, int)>();

  ffi.Pointer<UplinkError> uplink_access_override_encryption_key(
    ffi.Pointer<UplinkAccess> access,
    ffi.Pointer<uplink_const_char> bucket,
    ffi.Pointer<uplink_const_char> prefix,
    ffi.Pointer<UplinkEncryptionKey> encryptionKey,
  ) {
    return _uplink_access_override_encryption_key(
      access,
      bucket,
      prefix,
      encryptionKey,
    );
  }

  late final _uplink_access_override_encryption_keyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UplinkError> Function(
                  ffi.Pointer<UplinkAccess>,
                  ffi.Pointer<uplink_const_char>,
                  ffi.Pointer<uplink_const_char>,
                  ffi.Pointer<UplinkEncryptionKey>)>>(
      'uplink_access_override_encryption_key');
  late final _uplink_access_override_encryption_key =
      _uplink_access_override_encryption_keyPtr.asFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkAccess>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<UplinkEncryptionKey>)>();

  void uplink_free_string_result(
    UplinkStringResult result,
  ) {
    return _uplink_free_string_result(
      result,
    );
  }

  late final _uplink_free_string_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkStringResult)>>(
          'uplink_free_string_result');
  late final _uplink_free_string_result = _uplink_free_string_resultPtr
      .asFunction<void Function(UplinkStringResult)>();

  void uplink_free_access_result(
    UplinkAccessResult result,
  ) {
    return _uplink_free_access_result(
      result,
    );
  }

  late final _uplink_free_access_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkAccessResult)>>(
          'uplink_free_access_result');
  late final _uplink_free_access_result = _uplink_free_access_resultPtr
      .asFunction<void Function(UplinkAccessResult)>();

  UplinkBucketResult uplink_stat_bucket(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
  ) {
    return _uplink_stat_bucket(
      project,
      bucket_name,
    );
  }

  late final _uplink_stat_bucketPtr = _lookup<
      ffi.NativeFunction<
          UplinkBucketResult Function(ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>)>>('uplink_stat_bucket');
  late final _uplink_stat_bucket = _uplink_stat_bucketPtr.asFunction<
      UplinkBucketResult Function(
          ffi.Pointer<UplinkProject>, ffi.Pointer<uplink_const_char>)>();

  UplinkBucketResult uplink_create_bucket(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
  ) {
    return _uplink_create_bucket(
      project,
      bucket_name,
    );
  }

  late final _uplink_create_bucketPtr = _lookup<
      ffi.NativeFunction<
          UplinkBucketResult Function(ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>)>>('uplink_create_bucket');
  late final _uplink_create_bucket = _uplink_create_bucketPtr.asFunction<
      UplinkBucketResult Function(
          ffi.Pointer<UplinkProject>, ffi.Pointer<uplink_const_char>)>();

  UplinkBucketResult uplink_ensure_bucket(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
  ) {
    return _uplink_ensure_bucket(
      project,
      bucket_name,
    );
  }

  late final _uplink_ensure_bucketPtr = _lookup<
      ffi.NativeFunction<
          UplinkBucketResult Function(ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>)>>('uplink_ensure_bucket');
  late final _uplink_ensure_bucket = _uplink_ensure_bucketPtr.asFunction<
      UplinkBucketResult Function(
          ffi.Pointer<UplinkProject>, ffi.Pointer<uplink_const_char>)>();

  UplinkBucketResult uplink_delete_bucket(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
  ) {
    return _uplink_delete_bucket(
      project,
      bucket_name,
    );
  }

  late final _uplink_delete_bucketPtr = _lookup<
      ffi.NativeFunction<
          UplinkBucketResult Function(ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>)>>('uplink_delete_bucket');
  late final _uplink_delete_bucket = _uplink_delete_bucketPtr.asFunction<
      UplinkBucketResult Function(
          ffi.Pointer<UplinkProject>, ffi.Pointer<uplink_const_char>)>();

  UplinkBucketResult uplink_delete_bucket_with_objects(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
  ) {
    return _uplink_delete_bucket_with_objects(
      project,
      bucket_name,
    );
  }

  late final _uplink_delete_bucket_with_objectsPtr = _lookup<
          ffi.NativeFunction<
              UplinkBucketResult Function(
                  ffi.Pointer<UplinkProject>, ffi.Pointer<uplink_const_char>)>>(
      'uplink_delete_bucket_with_objects');
  late final _uplink_delete_bucket_with_objects =
      _uplink_delete_bucket_with_objectsPtr.asFunction<
          UplinkBucketResult Function(
              ffi.Pointer<UplinkProject>, ffi.Pointer<uplink_const_char>)>();

  void uplink_free_bucket_result(
    UplinkBucketResult result,
  ) {
    return _uplink_free_bucket_result(
      result,
    );
  }

  late final _uplink_free_bucket_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkBucketResult)>>(
          'uplink_free_bucket_result');
  late final _uplink_free_bucket_result = _uplink_free_bucket_resultPtr
      .asFunction<void Function(UplinkBucketResult)>();

  void uplink_free_bucket(
    ffi.Pointer<UplinkBucket> bucket,
  ) {
    return _uplink_free_bucket(
      bucket,
    );
  }

  late final _uplink_free_bucketPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UplinkBucket>)>>(
          'uplink_free_bucket');
  late final _uplink_free_bucket = _uplink_free_bucketPtr
      .asFunction<void Function(ffi.Pointer<UplinkBucket>)>();

  ffi.Pointer<UplinkBucketIterator> uplink_list_buckets(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<UplinkListBucketsOptions> options,
  ) {
    return _uplink_list_buckets(
      project,
      options,
    );
  }

  late final _uplink_list_bucketsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkBucketIterator> Function(ffi.Pointer<UplinkProject>,
              ffi.Pointer<UplinkListBucketsOptions>)>>('uplink_list_buckets');
  late final _uplink_list_buckets = _uplink_list_bucketsPtr.asFunction<
      ffi.Pointer<UplinkBucketIterator> Function(
          ffi.Pointer<UplinkProject>, ffi.Pointer<UplinkListBucketsOptions>)>();

  bool uplink_bucket_iterator_next(
    ffi.Pointer<UplinkBucketIterator> iterator,
  ) {
    return _uplink_bucket_iterator_next(
          iterator,
        ) !=
        0;
  }

  late final _uplink_bucket_iterator_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<UplinkBucketIterator>)>>(
      'uplink_bucket_iterator_next');
  late final _uplink_bucket_iterator_next = _uplink_bucket_iterator_nextPtr
      .asFunction<int Function(ffi.Pointer<UplinkBucketIterator>)>();

  ffi.Pointer<UplinkError> uplink_bucket_iterator_err(
    ffi.Pointer<UplinkBucketIterator> iterator,
  ) {
    return _uplink_bucket_iterator_err(
      iterator,
    );
  }

  late final _uplink_bucket_iterator_errPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UplinkError> Function(
                  ffi.Pointer<UplinkBucketIterator>)>>(
      'uplink_bucket_iterator_err');
  late final _uplink_bucket_iterator_err =
      _uplink_bucket_iterator_errPtr.asFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkBucketIterator>)>();

  ffi.Pointer<UplinkBucket> uplink_bucket_iterator_item(
    ffi.Pointer<UplinkBucketIterator> iterator,
  ) {
    return _uplink_bucket_iterator_item(
      iterator,
    );
  }

  late final _uplink_bucket_iterator_itemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UplinkBucket> Function(
                  ffi.Pointer<UplinkBucketIterator>)>>(
      'uplink_bucket_iterator_item');
  late final _uplink_bucket_iterator_item =
      _uplink_bucket_iterator_itemPtr.asFunction<
          ffi.Pointer<UplinkBucket> Function(
              ffi.Pointer<UplinkBucketIterator>)>();

  void uplink_free_bucket_iterator(
    ffi.Pointer<UplinkBucketIterator> iterator,
  ) {
    return _uplink_free_bucket_iterator(
      iterator,
    );
  }

  late final _uplink_free_bucket_iteratorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UplinkBucketIterator>)>>(
      'uplink_free_bucket_iterator');
  late final _uplink_free_bucket_iterator = _uplink_free_bucket_iteratorPtr
      .asFunction<void Function(ffi.Pointer<UplinkBucketIterator>)>();

  UplinkAccessResult uplink_config_request_access_with_passphrase(
    UplinkConfig config,
    ffi.Pointer<uplink_const_char> satellite_address,
    ffi.Pointer<uplink_const_char> api_key,
    ffi.Pointer<uplink_const_char> passphrase,
  ) {
    return _uplink_config_request_access_with_passphrase(
      config,
      satellite_address,
      api_key,
      passphrase,
    );
  }

  late final _uplink_config_request_access_with_passphrasePtr = _lookup<
          ffi.NativeFunction<
              UplinkAccessResult Function(
                  UplinkConfig,
                  ffi.Pointer<uplink_const_char>,
                  ffi.Pointer<uplink_const_char>,
                  ffi.Pointer<uplink_const_char>)>>(
      'uplink_config_request_access_with_passphrase');
  late final _uplink_config_request_access_with_passphrase =
      _uplink_config_request_access_with_passphrasePtr.asFunction<
          UplinkAccessResult Function(
              UplinkConfig,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>)>();

  UplinkProjectResult uplink_config_open_project(
    UplinkConfig config,
    ffi.Pointer<UplinkAccess> access,
  ) {
    return _uplink_config_open_project(
      config,
      access,
    );
  }

  late final _uplink_config_open_projectPtr = _lookup<
      ffi.NativeFunction<
          UplinkProjectResult Function(UplinkConfig,
              ffi.Pointer<UplinkAccess>)>>('uplink_config_open_project');
  late final _uplink_config_open_project =
      _uplink_config_open_projectPtr.asFunction<
          UplinkProjectResult Function(
              UplinkConfig, ffi.Pointer<UplinkAccess>)>();

  UplinkDownloadResult uplink_download_object(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<uplink_const_char> object_key,
    ffi.Pointer<UplinkDownloadOptions> options,
  ) {
    return _uplink_download_object(
      project,
      bucket_name,
      object_key,
      options,
    );
  }

  late final _uplink_download_objectPtr = _lookup<
      ffi.NativeFunction<
          UplinkDownloadResult Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<UplinkDownloadOptions>)>>('uplink_download_object');
  late final _uplink_download_object = _uplink_download_objectPtr.asFunction<
      UplinkDownloadResult Function(
          ffi.Pointer<UplinkProject>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<UplinkDownloadOptions>)>();

  UplinkReadResult uplink_download_read(
    ffi.Pointer<UplinkDownload> download,
    ffi.Pointer<ffi.Void> bytes,
    int length,
  ) {
    return _uplink_download_read(
      download,
      bytes,
      length,
    );
  }

  late final _uplink_download_readPtr = _lookup<
      ffi.NativeFunction<
          UplinkReadResult Function(ffi.Pointer<UplinkDownload>,
              ffi.Pointer<ffi.Void>, size_t)>>('uplink_download_read');
  late final _uplink_download_read = _uplink_download_readPtr.asFunction<
      UplinkReadResult Function(
          ffi.Pointer<UplinkDownload>, ffi.Pointer<ffi.Void>, int)>();

  UplinkObjectResult uplink_download_info(
    ffi.Pointer<UplinkDownload> download,
  ) {
    return _uplink_download_info(
      download,
    );
  }

  late final _uplink_download_infoPtr = _lookup<
      ffi.NativeFunction<
          UplinkObjectResult Function(
              ffi.Pointer<UplinkDownload>)>>('uplink_download_info');
  late final _uplink_download_info = _uplink_download_infoPtr
      .asFunction<UplinkObjectResult Function(ffi.Pointer<UplinkDownload>)>();

  void uplink_free_read_result(
    UplinkReadResult result,
  ) {
    return _uplink_free_read_result(
      result,
    );
  }

  late final _uplink_free_read_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkReadResult)>>(
          'uplink_free_read_result');
  late final _uplink_free_read_result =
      _uplink_free_read_resultPtr.asFunction<void Function(UplinkReadResult)>();

  ffi.Pointer<UplinkError> uplink_close_download(
    ffi.Pointer<UplinkDownload> download,
  ) {
    return _uplink_close_download(
      download,
    );
  }

  late final _uplink_close_downloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkDownload>)>>('uplink_close_download');
  late final _uplink_close_download = _uplink_close_downloadPtr.asFunction<
      ffi.Pointer<UplinkError> Function(ffi.Pointer<UplinkDownload>)>();

  void uplink_free_download_result(
    UplinkDownloadResult result,
  ) {
    return _uplink_free_download_result(
      result,
    );
  }

  late final _uplink_free_download_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkDownloadResult)>>(
          'uplink_free_download_result');
  late final _uplink_free_download_result = _uplink_free_download_resultPtr
      .asFunction<void Function(UplinkDownloadResult)>();

  EdgeCredentialsResult edge_register_access(
    EdgeConfig config,
    ffi.Pointer<UplinkAccess> access,
    ffi.Pointer<EdgeRegisterAccessOptions> options,
  ) {
    return _edge_register_access(
      config,
      access,
      options,
    );
  }

  late final _edge_register_accessPtr = _lookup<
      ffi.NativeFunction<
          EdgeCredentialsResult Function(EdgeConfig, ffi.Pointer<UplinkAccess>,
              ffi.Pointer<EdgeRegisterAccessOptions>)>>('edge_register_access');
  late final _edge_register_access = _edge_register_accessPtr.asFunction<
      EdgeCredentialsResult Function(EdgeConfig, ffi.Pointer<UplinkAccess>,
          ffi.Pointer<EdgeRegisterAccessOptions>)>();

  void edge_free_credentials_result(
    EdgeCredentialsResult result,
  ) {
    return _edge_free_credentials_result(
      result,
    );
  }

  late final _edge_free_credentials_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(EdgeCredentialsResult)>>(
          'edge_free_credentials_result');
  late final _edge_free_credentials_result = _edge_free_credentials_resultPtr
      .asFunction<void Function(EdgeCredentialsResult)>();

  void edge_free_credentials(
    ffi.Pointer<EdgeCredentials> credentials,
  ) {
    return _edge_free_credentials(
      credentials,
    );
  }

  late final _edge_free_credentialsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EdgeCredentials>)>>(
      'edge_free_credentials');
  late final _edge_free_credentials = _edge_free_credentialsPtr
      .asFunction<void Function(ffi.Pointer<EdgeCredentials>)>();

  UplinkStringResult edge_join_share_url(
    ffi.Pointer<uplink_const_char> baseURL,
    ffi.Pointer<uplink_const_char> accessKeyID,
    ffi.Pointer<uplink_const_char> bucket,
    ffi.Pointer<uplink_const_char> key,
    ffi.Pointer<EdgeShareURLOptions> options,
  ) {
    return _edge_join_share_url(
      baseURL,
      accessKeyID,
      bucket,
      key,
      options,
    );
  }

  late final _edge_join_share_urlPtr = _lookup<
      ffi.NativeFunction<
          UplinkStringResult Function(
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<EdgeShareURLOptions>)>>('edge_join_share_url');
  late final _edge_join_share_url = _edge_join_share_urlPtr.asFunction<
      UplinkStringResult Function(
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<EdgeShareURLOptions>)>();

  UplinkEncryptionKeyResult uplink_derive_encryption_key(
    ffi.Pointer<uplink_const_char> passphrase,
    ffi.Pointer<ffi.Void> salt,
    int length,
  ) {
    return _uplink_derive_encryption_key(
      passphrase,
      salt,
      length,
    );
  }

  late final _uplink_derive_encryption_keyPtr = _lookup<
      ffi.NativeFunction<
          UplinkEncryptionKeyResult Function(ffi.Pointer<uplink_const_char>,
              ffi.Pointer<ffi.Void>, size_t)>>('uplink_derive_encryption_key');
  late final _uplink_derive_encryption_key =
      _uplink_derive_encryption_keyPtr.asFunction<
          UplinkEncryptionKeyResult Function(
              ffi.Pointer<uplink_const_char>, ffi.Pointer<ffi.Void>, int)>();

  void uplink_free_encryption_key_result(
    UplinkEncryptionKeyResult result,
  ) {
    return _uplink_free_encryption_key_result(
      result,
    );
  }

  late final _uplink_free_encryption_key_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkEncryptionKeyResult)>>(
          'uplink_free_encryption_key_result');
  late final _uplink_free_encryption_key_result =
      _uplink_free_encryption_key_resultPtr
          .asFunction<void Function(UplinkEncryptionKeyResult)>();

  void uplink_free_error(
    ffi.Pointer<UplinkError> err,
  ) {
    return _uplink_free_error(
      err,
    );
  }

  late final _uplink_free_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UplinkError>)>>(
          'uplink_free_error');
  late final _uplink_free_error = _uplink_free_errorPtr
      .asFunction<void Function(ffi.Pointer<UplinkError>)>();

  int uplink_internal_UniverseIsEmpty() {
    return _uplink_internal_UniverseIsEmpty();
  }

  late final _uplink_internal_UniverseIsEmptyPtr =
      _lookup<ffi.NativeFunction<GoUint8 Function()>>(
          'uplink_internal_UniverseIsEmpty');
  late final _uplink_internal_UniverseIsEmpty =
      _uplink_internal_UniverseIsEmptyPtr.asFunction<int Function()>();

  ffi.Pointer<UplinkError> uplink_move_object(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> old_bucket_name,
    ffi.Pointer<uplink_const_char> old_object_key,
    ffi.Pointer<uplink_const_char> new_bucket_name,
    ffi.Pointer<uplink_const_char> new_object_key,
    ffi.Pointer<UplinkMoveObjectOptions> options,
  ) {
    return _uplink_move_object(
      project,
      old_bucket_name,
      old_object_key,
      new_bucket_name,
      new_object_key,
      options,
    );
  }

  late final _uplink_move_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<UplinkMoveObjectOptions>)>>('uplink_move_object');
  late final _uplink_move_object = _uplink_move_objectPtr.asFunction<
      ffi.Pointer<UplinkError> Function(
          ffi.Pointer<UplinkProject>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<UplinkMoveObjectOptions>)>();

  UplinkUploadInfoResult uplink_begin_upload(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<uplink_const_char> object_key,
    ffi.Pointer<UplinkUploadOptions> options,
  ) {
    return _uplink_begin_upload(
      project,
      bucket_name,
      object_key,
      options,
    );
  }

  late final _uplink_begin_uploadPtr = _lookup<
      ffi.NativeFunction<
          UplinkUploadInfoResult Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<UplinkUploadOptions>)>>('uplink_begin_upload');
  late final _uplink_begin_upload = _uplink_begin_uploadPtr.asFunction<
      UplinkUploadInfoResult Function(
          ffi.Pointer<UplinkProject>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<UplinkUploadOptions>)>();

  void uplink_free_upload_info_result(
    UplinkUploadInfoResult result,
  ) {
    return _uplink_free_upload_info_result(
      result,
    );
  }

  late final _uplink_free_upload_info_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkUploadInfoResult)>>(
          'uplink_free_upload_info_result');
  late final _uplink_free_upload_info_result =
      _uplink_free_upload_info_resultPtr
          .asFunction<void Function(UplinkUploadInfoResult)>();

  void uplink_free_upload_info(
    ffi.Pointer<UplinkUploadInfo> info,
  ) {
    return _uplink_free_upload_info(
      info,
    );
  }

  late final _uplink_free_upload_infoPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UplinkUploadInfo>)>>(
      'uplink_free_upload_info');
  late final _uplink_free_upload_info = _uplink_free_upload_infoPtr
      .asFunction<void Function(ffi.Pointer<UplinkUploadInfo>)>();

  UplinkCommitUploadResult uplink_commit_upload(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<uplink_const_char> object_key,
    ffi.Pointer<uplink_const_char> upload_id,
    ffi.Pointer<UplinkCommitUploadOptions> options,
  ) {
    return _uplink_commit_upload(
      project,
      bucket_name,
      object_key,
      upload_id,
      options,
    );
  }

  late final _uplink_commit_uploadPtr = _lookup<
      ffi.NativeFunction<
          UplinkCommitUploadResult Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<UplinkCommitUploadOptions>)>>('uplink_commit_upload');
  late final _uplink_commit_upload = _uplink_commit_uploadPtr.asFunction<
      UplinkCommitUploadResult Function(
          ffi.Pointer<UplinkProject>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<UplinkCommitUploadOptions>)>();

  void uplink_free_commit_upload_result(
    UplinkCommitUploadResult result,
  ) {
    return _uplink_free_commit_upload_result(
      result,
    );
  }

  late final _uplink_free_commit_upload_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkCommitUploadResult)>>(
          'uplink_free_commit_upload_result');
  late final _uplink_free_commit_upload_result =
      _uplink_free_commit_upload_resultPtr
          .asFunction<void Function(UplinkCommitUploadResult)>();

  ffi.Pointer<UplinkError> uplink_abort_upload(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<uplink_const_char> object_key,
    ffi.Pointer<uplink_const_char> upload_id,
  ) {
    return _uplink_abort_upload(
      project,
      bucket_name,
      object_key,
      upload_id,
    );
  }

  late final _uplink_abort_uploadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>)>>('uplink_abort_upload');
  late final _uplink_abort_upload = _uplink_abort_uploadPtr.asFunction<
      ffi.Pointer<UplinkError> Function(
          ffi.Pointer<UplinkProject>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>)>();

  UplinkPartUploadResult uplink_upload_part(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<uplink_const_char> object_key,
    ffi.Pointer<uplink_const_char> upload_id,
    int part_number,
  ) {
    return _uplink_upload_part(
      project,
      bucket_name,
      object_key,
      upload_id,
      part_number,
    );
  }

  late final _uplink_upload_partPtr = _lookup<
      ffi.NativeFunction<
          UplinkPartUploadResult Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Uint32)>>('uplink_upload_part');
  late final _uplink_upload_part = _uplink_upload_partPtr.asFunction<
      UplinkPartUploadResult Function(
          ffi.Pointer<UplinkProject>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          int)>();

  UplinkWriteResult uplink_part_upload_write(
    ffi.Pointer<UplinkPartUpload> upload,
    ffi.Pointer<ffi.Void> bytes,
    int length,
  ) {
    return _uplink_part_upload_write(
      upload,
      bytes,
      length,
    );
  }

  late final _uplink_part_upload_writePtr = _lookup<
      ffi.NativeFunction<
          UplinkWriteResult Function(ffi.Pointer<UplinkPartUpload>,
              ffi.Pointer<ffi.Void>, size_t)>>('uplink_part_upload_write');
  late final _uplink_part_upload_write =
      _uplink_part_upload_writePtr.asFunction<
          UplinkWriteResult Function(
              ffi.Pointer<UplinkPartUpload>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<UplinkError> uplink_part_upload_commit(
    ffi.Pointer<UplinkPartUpload> upload,
  ) {
    return _uplink_part_upload_commit(
      upload,
    );
  }

  late final _uplink_part_upload_commitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkPartUpload>)>>('uplink_part_upload_commit');
  late final _uplink_part_upload_commit =
      _uplink_part_upload_commitPtr.asFunction<
          ffi.Pointer<UplinkError> Function(ffi.Pointer<UplinkPartUpload>)>();

  ffi.Pointer<UplinkError> uplink_part_upload_abort(
    ffi.Pointer<UplinkPartUpload> upload,
  ) {
    return _uplink_part_upload_abort(
      upload,
    );
  }

  late final _uplink_part_upload_abortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkPartUpload>)>>('uplink_part_upload_abort');
  late final _uplink_part_upload_abort =
      _uplink_part_upload_abortPtr.asFunction<
          ffi.Pointer<UplinkError> Function(ffi.Pointer<UplinkPartUpload>)>();

  ffi.Pointer<UplinkError> uplink_part_upload_set_etag(
    ffi.Pointer<UplinkPartUpload> upload,
    ffi.Pointer<uplink_const_char> etag,
  ) {
    return _uplink_part_upload_set_etag(
      upload,
      etag,
    );
  }

  late final _uplink_part_upload_set_etagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkError> Function(ffi.Pointer<UplinkPartUpload>,
              ffi.Pointer<uplink_const_char>)>>('uplink_part_upload_set_etag');
  late final _uplink_part_upload_set_etag =
      _uplink_part_upload_set_etagPtr.asFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkPartUpload>, ffi.Pointer<uplink_const_char>)>();

  UplinkPartResult uplink_part_upload_info(
    ffi.Pointer<UplinkPartUpload> upload,
  ) {
    return _uplink_part_upload_info(
      upload,
    );
  }

  late final _uplink_part_upload_infoPtr = _lookup<
      ffi.NativeFunction<
          UplinkPartResult Function(
              ffi.Pointer<UplinkPartUpload>)>>('uplink_part_upload_info');
  late final _uplink_part_upload_info = _uplink_part_upload_infoPtr
      .asFunction<UplinkPartResult Function(ffi.Pointer<UplinkPartUpload>)>();

  void uplink_free_part_result(
    UplinkPartResult result,
  ) {
    return _uplink_free_part_result(
      result,
    );
  }

  late final _uplink_free_part_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkPartResult)>>(
          'uplink_free_part_result');
  late final _uplink_free_part_result =
      _uplink_free_part_resultPtr.asFunction<void Function(UplinkPartResult)>();

  void uplink_free_part_upload_result(
    UplinkPartUploadResult result,
  ) {
    return _uplink_free_part_upload_result(
      result,
    );
  }

  late final _uplink_free_part_upload_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkPartUploadResult)>>(
          'uplink_free_part_upload_result');
  late final _uplink_free_part_upload_result =
      _uplink_free_part_upload_resultPtr
          .asFunction<void Function(UplinkPartUploadResult)>();

  void uplink_free_part(
    ffi.Pointer<UplinkPart> part1,
  ) {
    return _uplink_free_part(
      part1,
    );
  }

  late final _uplink_free_partPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UplinkPart>)>>(
          'uplink_free_part');
  late final _uplink_free_part =
      _uplink_free_partPtr.asFunction<void Function(ffi.Pointer<UplinkPart>)>();

  ffi.Pointer<UplinkUploadIterator> uplink_list_uploads(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<UplinkListUploadsOptions> options,
  ) {
    return _uplink_list_uploads(
      project,
      bucket_name,
      options,
    );
  }

  late final _uplink_list_uploadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkUploadIterator> Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<UplinkListUploadsOptions>)>>('uplink_list_uploads');
  late final _uplink_list_uploads = _uplink_list_uploadsPtr.asFunction<
      ffi.Pointer<UplinkUploadIterator> Function(
          ffi.Pointer<UplinkProject>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<UplinkListUploadsOptions>)>();

  bool uplink_upload_iterator_next(
    ffi.Pointer<UplinkUploadIterator> iterator,
  ) {
    return _uplink_upload_iterator_next(
          iterator,
        ) !=
        0;
  }

  late final _uplink_upload_iterator_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<UplinkUploadIterator>)>>(
      'uplink_upload_iterator_next');
  late final _uplink_upload_iterator_next = _uplink_upload_iterator_nextPtr
      .asFunction<int Function(ffi.Pointer<UplinkUploadIterator>)>();

  ffi.Pointer<UplinkError> uplink_upload_iterator_err(
    ffi.Pointer<UplinkUploadIterator> iterator,
  ) {
    return _uplink_upload_iterator_err(
      iterator,
    );
  }

  late final _uplink_upload_iterator_errPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UplinkError> Function(
                  ffi.Pointer<UplinkUploadIterator>)>>(
      'uplink_upload_iterator_err');
  late final _uplink_upload_iterator_err =
      _uplink_upload_iterator_errPtr.asFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkUploadIterator>)>();

  ffi.Pointer<UplinkUploadInfo> uplink_upload_iterator_item(
    ffi.Pointer<UplinkUploadIterator> iterator,
  ) {
    return _uplink_upload_iterator_item(
      iterator,
    );
  }

  late final _uplink_upload_iterator_itemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UplinkUploadInfo> Function(
                  ffi.Pointer<UplinkUploadIterator>)>>(
      'uplink_upload_iterator_item');
  late final _uplink_upload_iterator_item =
      _uplink_upload_iterator_itemPtr.asFunction<
          ffi.Pointer<UplinkUploadInfo> Function(
              ffi.Pointer<UplinkUploadIterator>)>();

  void uplink_free_upload_iterator(
    ffi.Pointer<UplinkUploadIterator> iterator,
  ) {
    return _uplink_free_upload_iterator(
      iterator,
    );
  }

  late final _uplink_free_upload_iteratorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UplinkUploadIterator>)>>(
      'uplink_free_upload_iterator');
  late final _uplink_free_upload_iterator = _uplink_free_upload_iteratorPtr
      .asFunction<void Function(ffi.Pointer<UplinkUploadIterator>)>();

  ffi.Pointer<UplinkPartIterator> uplink_list_upload_parts(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<uplink_const_char> object_key,
    ffi.Pointer<uplink_const_char> upload_id,
    ffi.Pointer<UplinkListUploadPartsOptions> options,
  ) {
    return _uplink_list_upload_parts(
      project,
      bucket_name,
      object_key,
      upload_id,
      options,
    );
  }

  late final _uplink_list_upload_partsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UplinkPartIterator> Function(
                  ffi.Pointer<UplinkProject>,
                  ffi.Pointer<uplink_const_char>,
                  ffi.Pointer<uplink_const_char>,
                  ffi.Pointer<uplink_const_char>,
                  ffi.Pointer<UplinkListUploadPartsOptions>)>>(
      'uplink_list_upload_parts');
  late final _uplink_list_upload_parts =
      _uplink_list_upload_partsPtr.asFunction<
          ffi.Pointer<UplinkPartIterator> Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<UplinkListUploadPartsOptions>)>();

  bool uplink_part_iterator_next(
    ffi.Pointer<UplinkPartIterator> iterator,
  ) {
    return _uplink_part_iterator_next(
          iterator,
        ) !=
        0;
  }

  late final _uplink_part_iterator_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<UplinkPartIterator>)>>('uplink_part_iterator_next');
  late final _uplink_part_iterator_next = _uplink_part_iterator_nextPtr
      .asFunction<int Function(ffi.Pointer<UplinkPartIterator>)>();

  ffi.Pointer<UplinkError> uplink_part_iterator_err(
    ffi.Pointer<UplinkPartIterator> iterator,
  ) {
    return _uplink_part_iterator_err(
      iterator,
    );
  }

  late final _uplink_part_iterator_errPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkPartIterator>)>>('uplink_part_iterator_err');
  late final _uplink_part_iterator_err =
      _uplink_part_iterator_errPtr.asFunction<
          ffi.Pointer<UplinkError> Function(ffi.Pointer<UplinkPartIterator>)>();

  ffi.Pointer<UplinkPart> uplink_part_iterator_item(
    ffi.Pointer<UplinkPartIterator> iterator,
  ) {
    return _uplink_part_iterator_item(
      iterator,
    );
  }

  late final _uplink_part_iterator_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkPart> Function(
              ffi.Pointer<UplinkPartIterator>)>>('uplink_part_iterator_item');
  late final _uplink_part_iterator_item =
      _uplink_part_iterator_itemPtr.asFunction<
          ffi.Pointer<UplinkPart> Function(ffi.Pointer<UplinkPartIterator>)>();

  void uplink_free_part_iterator(
    ffi.Pointer<UplinkPartIterator> iterator,
  ) {
    return _uplink_free_part_iterator(
      iterator,
    );
  }

  late final _uplink_free_part_iteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UplinkPartIterator>)>>('uplink_free_part_iterator');
  late final _uplink_free_part_iterator = _uplink_free_part_iteratorPtr
      .asFunction<void Function(ffi.Pointer<UplinkPartIterator>)>();

  UplinkObjectResult uplink_stat_object(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<uplink_const_char> object_key,
  ) {
    return _uplink_stat_object(
      project,
      bucket_name,
      object_key,
    );
  }

  late final _uplink_stat_objectPtr = _lookup<
      ffi.NativeFunction<
          UplinkObjectResult Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>)>>('uplink_stat_object');
  late final _uplink_stat_object = _uplink_stat_objectPtr.asFunction<
      UplinkObjectResult Function(ffi.Pointer<UplinkProject>,
          ffi.Pointer<uplink_const_char>, ffi.Pointer<uplink_const_char>)>();

  UplinkObjectResult uplink_delete_object(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<uplink_const_char> object_key,
  ) {
    return _uplink_delete_object(
      project,
      bucket_name,
      object_key,
    );
  }

  late final _uplink_delete_objectPtr = _lookup<
      ffi.NativeFunction<
          UplinkObjectResult Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>)>>('uplink_delete_object');
  late final _uplink_delete_object = _uplink_delete_objectPtr.asFunction<
      UplinkObjectResult Function(ffi.Pointer<UplinkProject>,
          ffi.Pointer<uplink_const_char>, ffi.Pointer<uplink_const_char>)>();

  void uplink_free_object_result(
    UplinkObjectResult obj,
  ) {
    return _uplink_free_object_result(
      obj,
    );
  }

  late final _uplink_free_object_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkObjectResult)>>(
          'uplink_free_object_result');
  late final _uplink_free_object_result = _uplink_free_object_resultPtr
      .asFunction<void Function(UplinkObjectResult)>();

  void uplink_free_object(
    ffi.Pointer<UplinkObject> obj,
  ) {
    return _uplink_free_object(
      obj,
    );
  }

  late final _uplink_free_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UplinkObject>)>>(
          'uplink_free_object');
  late final _uplink_free_object = _uplink_free_objectPtr
      .asFunction<void Function(ffi.Pointer<UplinkObject>)>();

  ffi.Pointer<UplinkError> uplink_update_object_metadata(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<uplink_const_char> object_key,
    UplinkCustomMetadata new_metadata,
    ffi.Pointer<UplinkUploadObjectMetadataOptions> options,
  ) {
    return _uplink_update_object_metadata(
      project,
      bucket_name,
      object_key,
      new_metadata,
      options,
    );
  }

  late final _uplink_update_object_metadataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UplinkError> Function(
                  ffi.Pointer<UplinkProject>,
                  ffi.Pointer<uplink_const_char>,
                  ffi.Pointer<uplink_const_char>,
                  UplinkCustomMetadata,
                  ffi.Pointer<UplinkUploadObjectMetadataOptions>)>>(
      'uplink_update_object_metadata');
  late final _uplink_update_object_metadata =
      _uplink_update_object_metadataPtr.asFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              UplinkCustomMetadata,
              ffi.Pointer<UplinkUploadObjectMetadataOptions>)>();

  ffi.Pointer<UplinkObjectIterator> uplink_list_objects(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<UplinkListObjectsOptions> options,
  ) {
    return _uplink_list_objects(
      project,
      bucket_name,
      options,
    );
  }

  late final _uplink_list_objectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkObjectIterator> Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<UplinkListObjectsOptions>)>>('uplink_list_objects');
  late final _uplink_list_objects = _uplink_list_objectsPtr.asFunction<
      ffi.Pointer<UplinkObjectIterator> Function(
          ffi.Pointer<UplinkProject>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<UplinkListObjectsOptions>)>();

  bool uplink_object_iterator_next(
    ffi.Pointer<UplinkObjectIterator> iterator,
  ) {
    return _uplink_object_iterator_next(
          iterator,
        ) !=
        0;
  }

  late final _uplink_object_iterator_nextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<UplinkObjectIterator>)>>(
      'uplink_object_iterator_next');
  late final _uplink_object_iterator_next = _uplink_object_iterator_nextPtr
      .asFunction<int Function(ffi.Pointer<UplinkObjectIterator>)>();

  ffi.Pointer<UplinkError> uplink_object_iterator_err(
    ffi.Pointer<UplinkObjectIterator> iterator,
  ) {
    return _uplink_object_iterator_err(
      iterator,
    );
  }

  late final _uplink_object_iterator_errPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UplinkError> Function(
                  ffi.Pointer<UplinkObjectIterator>)>>(
      'uplink_object_iterator_err');
  late final _uplink_object_iterator_err =
      _uplink_object_iterator_errPtr.asFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkObjectIterator>)>();

  ffi.Pointer<UplinkObject> uplink_object_iterator_item(
    ffi.Pointer<UplinkObjectIterator> iterator,
  ) {
    return _uplink_object_iterator_item(
      iterator,
    );
  }

  late final _uplink_object_iterator_itemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UplinkObject> Function(
                  ffi.Pointer<UplinkObjectIterator>)>>(
      'uplink_object_iterator_item');
  late final _uplink_object_iterator_item =
      _uplink_object_iterator_itemPtr.asFunction<
          ffi.Pointer<UplinkObject> Function(
              ffi.Pointer<UplinkObjectIterator>)>();

  void uplink_free_object_iterator(
    ffi.Pointer<UplinkObjectIterator> iterator,
  ) {
    return _uplink_free_object_iterator(
      iterator,
    );
  }

  late final _uplink_free_object_iteratorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UplinkObjectIterator>)>>(
      'uplink_free_object_iterator');
  late final _uplink_free_object_iterator = _uplink_free_object_iteratorPtr
      .asFunction<void Function(ffi.Pointer<UplinkObjectIterator>)>();

  UplinkProjectResult uplink_open_project(
    ffi.Pointer<UplinkAccess> access,
  ) {
    return _uplink_open_project(
      access,
    );
  }

  late final _uplink_open_projectPtr = _lookup<
      ffi.NativeFunction<
          UplinkProjectResult Function(
              ffi.Pointer<UplinkAccess>)>>('uplink_open_project');
  late final _uplink_open_project = _uplink_open_projectPtr
      .asFunction<UplinkProjectResult Function(ffi.Pointer<UplinkAccess>)>();

  ffi.Pointer<UplinkError> uplink_close_project(
    ffi.Pointer<UplinkProject> project,
  ) {
    return _uplink_close_project(
      project,
    );
  }

  late final _uplink_close_projectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkProject>)>>('uplink_close_project');
  late final _uplink_close_project = _uplink_close_projectPtr.asFunction<
      ffi.Pointer<UplinkError> Function(ffi.Pointer<UplinkProject>)>();

  void uplink_free_project_result(
    UplinkProjectResult result,
  ) {
    return _uplink_free_project_result(
      result,
    );
  }

  late final _uplink_free_project_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkProjectResult)>>(
          'uplink_free_project_result');
  late final _uplink_free_project_result = _uplink_free_project_resultPtr
      .asFunction<void Function(UplinkProjectResult)>();

  UplinkUploadResult uplink_upload_object(
    ffi.Pointer<UplinkProject> project,
    ffi.Pointer<uplink_const_char> bucket_name,
    ffi.Pointer<uplink_const_char> object_key,
    ffi.Pointer<UplinkUploadOptions> options,
  ) {
    return _uplink_upload_object(
      project,
      bucket_name,
      object_key,
      options,
    );
  }

  late final _uplink_upload_objectPtr = _lookup<
      ffi.NativeFunction<
          UplinkUploadResult Function(
              ffi.Pointer<UplinkProject>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<uplink_const_char>,
              ffi.Pointer<UplinkUploadOptions>)>>('uplink_upload_object');
  late final _uplink_upload_object = _uplink_upload_objectPtr.asFunction<
      UplinkUploadResult Function(
          ffi.Pointer<UplinkProject>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<uplink_const_char>,
          ffi.Pointer<UplinkUploadOptions>)>();

  UplinkWriteResult uplink_upload_write(
    ffi.Pointer<UplinkUpload> upload,
    ffi.Pointer<ffi.Void> bytes,
    int length,
  ) {
    return _uplink_upload_write(
      upload,
      bytes,
      length,
    );
  }

  late final _uplink_upload_writePtr = _lookup<
      ffi.NativeFunction<
          UplinkWriteResult Function(ffi.Pointer<UplinkUpload>,
              ffi.Pointer<ffi.Void>, size_t)>>('uplink_upload_write');
  late final _uplink_upload_write = _uplink_upload_writePtr.asFunction<
      UplinkWriteResult Function(
          ffi.Pointer<UplinkUpload>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<UplinkError> uplink_upload_commit(
    ffi.Pointer<UplinkUpload> upload,
  ) {
    return _uplink_upload_commit(
      upload,
    );
  }

  late final _uplink_upload_commitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkUpload>)>>('uplink_upload_commit');
  late final _uplink_upload_commit = _uplink_upload_commitPtr.asFunction<
      ffi.Pointer<UplinkError> Function(ffi.Pointer<UplinkUpload>)>();

  ffi.Pointer<UplinkError> uplink_upload_abort(
    ffi.Pointer<UplinkUpload> upload,
  ) {
    return _uplink_upload_abort(
      upload,
    );
  }

  late final _uplink_upload_abortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkUpload>)>>('uplink_upload_abort');
  late final _uplink_upload_abort = _uplink_upload_abortPtr.asFunction<
      ffi.Pointer<UplinkError> Function(ffi.Pointer<UplinkUpload>)>();

  UplinkObjectResult uplink_upload_info(
    ffi.Pointer<UplinkUpload> upload,
  ) {
    return _uplink_upload_info(
      upload,
    );
  }

  late final _uplink_upload_infoPtr = _lookup<
      ffi.NativeFunction<
          UplinkObjectResult Function(
              ffi.Pointer<UplinkUpload>)>>('uplink_upload_info');
  late final _uplink_upload_info = _uplink_upload_infoPtr
      .asFunction<UplinkObjectResult Function(ffi.Pointer<UplinkUpload>)>();

  ffi.Pointer<UplinkError> uplink_upload_set_custom_metadata(
    ffi.Pointer<UplinkUpload> upload,
    UplinkCustomMetadata custom,
  ) {
    return _uplink_upload_set_custom_metadata(
      upload,
      custom,
    );
  }

  late final _uplink_upload_set_custom_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UplinkError> Function(ffi.Pointer<UplinkUpload>,
              UplinkCustomMetadata)>>('uplink_upload_set_custom_metadata');
  late final _uplink_upload_set_custom_metadata =
      _uplink_upload_set_custom_metadataPtr.asFunction<
          ffi.Pointer<UplinkError> Function(
              ffi.Pointer<UplinkUpload>, UplinkCustomMetadata)>();

  void uplink_free_write_result(
    UplinkWriteResult result,
  ) {
    return _uplink_free_write_result(
      result,
    );
  }

  late final _uplink_free_write_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkWriteResult)>>(
          'uplink_free_write_result');
  late final _uplink_free_write_result = _uplink_free_write_resultPtr
      .asFunction<void Function(UplinkWriteResult)>();

  void uplink_free_upload_result(
    UplinkUploadResult result,
  ) {
    return _uplink_free_upload_result(
      result,
    );
  }

  late final _uplink_free_upload_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UplinkUploadResult)>>(
          'uplink_free_upload_result');
  late final _uplink_free_upload_result = _uplink_free_upload_resultPtr
      .asFunction<void Function(UplinkUploadResult)>();
}

class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = ffi.Int64;

class UplinkHandle extends ffi.Struct {
  @size_t()
  external int _handle;
}

typedef size_t = ffi.Uint64;

class UplinkAccess extends ffi.Struct {
  @size_t()
  external int _handle;
}

class UplinkProject extends ffi.Struct {
  @size_t()
  external int _handle;
}

class UplinkDownload extends ffi.Struct {
  @size_t()
  external int _handle;
}

class UplinkUpload extends ffi.Struct {
  @size_t()
  external int _handle;
}

class UplinkEncryptionKey extends ffi.Struct {
  @size_t()
  external int _handle;
}

class UplinkPartUpload extends ffi.Struct {
  @size_t()
  external int _handle;
}

class UplinkConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> user_agent;

  @ffi.Int32()
  external int dial_timeout_milliseconds;

  external ffi.Pointer<ffi.Int8> temp_directory;
}

class UplinkBucket extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int64()
  external int created;
}

class UplinkSystemMetadata extends ffi.Struct {
  @ffi.Int64()
  external int created;

  @ffi.Int64()
  external int expires;

  @ffi.Int64()
  external int content_length;
}

class UplinkCustomMetadataEntry extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> key;

  @size_t()
  external int key_length;

  external ffi.Pointer<ffi.Int8> value;

  @size_t()
  external int value_length;
}

class UplinkCustomMetadata extends ffi.Struct {
  external ffi.Pointer<UplinkCustomMetadataEntry> entries;

  @size_t()
  external int count;
}

class UplinkObject extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> key;

  @ffi.Uint8()
  external int is_prefix;

  external UplinkSystemMetadata system;

  external UplinkCustomMetadata custom;
}

class UplinkUploadOptions extends ffi.Struct {
  @ffi.Int64()
  external int expires;
}

class UplinkDownloadOptions extends ffi.Struct {
  @ffi.Int64()
  external int offset;

  @ffi.Int64()
  external int length;
}

class UplinkListObjectsOptions extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> prefix;

  external ffi.Pointer<ffi.Int8> cursor;

  @ffi.Uint8()
  external int recursive;

  @ffi.Uint8()
  external int system;

  @ffi.Uint8()
  external int custom;
}

class UplinkListUploadsOptions extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> prefix;

  external ffi.Pointer<ffi.Int8> cursor;

  @ffi.Uint8()
  external int recursive;

  @ffi.Uint8()
  external int system;

  @ffi.Uint8()
  external int custom;
}

class UplinkListBucketsOptions extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> cursor;
}

class UplinkObjectIterator extends ffi.Struct {
  @size_t()
  external int _handle;
}

class UplinkBucketIterator extends ffi.Struct {
  @size_t()
  external int _handle;
}

class UplinkUploadIterator extends ffi.Struct {
  @size_t()
  external int _handle;
}

class UplinkPartIterator extends ffi.Struct {
  @size_t()
  external int _handle;
}

class UplinkPermission extends ffi.Struct {
  @ffi.Uint8()
  external int allow_download;

  @ffi.Uint8()
  external int allow_upload;

  @ffi.Uint8()
  external int allow_list;

  @ffi.Uint8()
  external int allow_delete;

  @ffi.Int64()
  external int not_before;

  @ffi.Int64()
  external int not_after;
}

class UplinkPart extends ffi.Struct {
  @ffi.Uint32()
  external int part_number;

  @size_t()
  external int size;

  @ffi.Int64()
  external int modified;

  external ffi.Pointer<ffi.Int8> etag;

  @size_t()
  external int etag_length;
}

class UplinkSharePrefix extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> bucket;

  external ffi.Pointer<ffi.Int8> prefix;
}

class UplinkError extends ffi.Struct {
  @ffi.Int32()
  external int code;

  external ffi.Pointer<ffi.Int8> message;
}

class UplinkAccessResult extends ffi.Struct {
  external ffi.Pointer<UplinkAccess> access;

  external ffi.Pointer<UplinkError> error;
}

class UplinkProjectResult extends ffi.Struct {
  external ffi.Pointer<UplinkProject> project;

  external ffi.Pointer<UplinkError> error;
}

class UplinkBucketResult extends ffi.Struct {
  external ffi.Pointer<UplinkBucket> bucket;

  external ffi.Pointer<UplinkError> error;
}

class UplinkObjectResult extends ffi.Struct {
  external ffi.Pointer<UplinkObject> object;

  external ffi.Pointer<UplinkError> error;
}

class UplinkUploadResult extends ffi.Struct {
  external ffi.Pointer<UplinkUpload> upload;

  external ffi.Pointer<UplinkError> error;
}

class UplinkPartUploadResult extends ffi.Struct {
  external ffi.Pointer<UplinkPartUpload> part_upload;

  external ffi.Pointer<UplinkError> error;
}

class UplinkDownloadResult extends ffi.Struct {
  external ffi.Pointer<UplinkDownload> download;

  external ffi.Pointer<UplinkError> error;
}

class UplinkWriteResult extends ffi.Struct {
  @size_t()
  external int bytes_written;

  external ffi.Pointer<UplinkError> error;
}

class UplinkReadResult extends ffi.Struct {
  @size_t()
  external int bytes_read;

  external ffi.Pointer<UplinkError> error;
}

class UplinkStringResult extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> string;

  external ffi.Pointer<UplinkError> error;
}

class UplinkEncryptionKeyResult extends ffi.Struct {
  external ffi.Pointer<UplinkEncryptionKey> encryption_key;

  external ffi.Pointer<UplinkError> error;
}

class UplinkUploadInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> upload_id;

  external ffi.Pointer<ffi.Int8> key;

  @ffi.Uint8()
  external int is_prefix;

  external UplinkSystemMetadata system;

  external UplinkCustomMetadata custom;
}

class UplinkUploadInfoResult extends ffi.Struct {
  external ffi.Pointer<UplinkUploadInfo> info;

  external ffi.Pointer<UplinkError> error;
}

class UplinkCommitUploadOptions extends ffi.Struct {
  external UplinkCustomMetadata custom_metadata;
}

class UplinkCommitUploadResult extends ffi.Struct {
  external ffi.Pointer<UplinkObject> object;

  external ffi.Pointer<UplinkError> error;
}

class UplinkPartResult extends ffi.Struct {
  external ffi.Pointer<UplinkPart> part1;

  external ffi.Pointer<UplinkError> error;
}

class UplinkListUploadPartsOptions extends ffi.Struct {
  @ffi.Uint32()
  external int cursor;
}

class EdgeConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> auth_service_address;

  external ffi.Pointer<ffi.Int8> certificate_pem;
}

class EdgeRegisterAccessOptions extends ffi.Struct {
  @ffi.Uint8()
  external int is_public;
}

class EdgeCredentials extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> access_key_id;

  external ffi.Pointer<ffi.Int8> secret_key;

  external ffi.Pointer<ffi.Int8> endpoint;
}

class EdgeCredentialsResult extends ffi.Struct {
  external ffi.Pointer<EdgeCredentials> credentials;

  external ffi.Pointer<UplinkError> error;
}

class EdgeShareURLOptions extends ffi.Struct {
  @ffi.Uint8()
  external int raw;
}

class UplinkMoveObjectOptions extends ffi.Opaque {}

class UplinkUploadObjectMetadataOptions extends ffi.Opaque {}

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.Int64;
typedef uplink_const_char = ffi.Int8;
typedef GoUint8 = ffi.Uint8;

const int ERROR_INTERNAL = 2;

const int ERROR_CANCELED = 3;

const int ERROR_INVALID_HANDLE = 4;

const int ERROR_TOO_MANY_REQUESTS = 5;

const int ERROR_BANDWIDTH_LIMIT_EXCEEDED = 6;

const int ERROR_BUCKET_NAME_INVALID = 16;

const int ERROR_BUCKET_ALREADY_EXISTS = 17;

const int ERROR_BUCKET_NOT_EMPTY = 18;

const int ERROR_BUCKET_NOT_FOUND = 19;

const int ERROR_OBJECT_KEY_INVALID = 32;

const int ERROR_OBJECT_NOT_FOUND = 33;

const int ERROR_UPLOAD_DONE = 34;

const int UPLINK_ERROR_INTERNAL = 2;

const int UPLINK_ERROR_CANCELED = 3;

const int UPLINK_ERROR_INVALID_HANDLE = 4;

const int UPLINK_ERROR_TOO_MANY_REQUESTS = 5;

const int UPLINK_ERROR_BANDWIDTH_LIMIT_EXCEEDED = 6;

const int UPLINK_ERROR_BUCKET_NAME_INVALID = 16;

const int UPLINK_ERROR_BUCKET_ALREADY_EXISTS = 17;

const int UPLINK_ERROR_BUCKET_NOT_EMPTY = 18;

const int UPLINK_ERROR_BUCKET_NOT_FOUND = 19;

const int UPLINK_ERROR_OBJECT_KEY_INVALID = 32;

const int UPLINK_ERROR_OBJECT_NOT_FOUND = 33;

const int UPLINK_ERROR_UPLOAD_DONE = 34;

const int EDGE_ERROR_AUTH_DIAL_FAILED = 48;

const int EDGE_ERROR_REGISTER_ACCESS_FAILED = 49;
